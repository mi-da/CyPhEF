package patternGenerator : patternGenerator = 'http://www.example.org/patternGenerator'
{
	package decentralizedPattern : decentralizedPattern = 'http://www.example.org/patternGenerator/decentralizedPattern'
	{
		class Node extends patternGenerator::ManagingSystem;
		class Master extends patternGenerator::ManagingSystem
		{
			invariant hasNOMonitor: self.monitor = null;
			invariant hasAnalyze: self.analyze <> null;
			invariant hasPlan: self.plan <> null;
			invariant hasNOExecute: self.execute = null;
			invariant
			analyzeSpeaksWithPlan: getMyContextInterComponentInteractions
				->select(context.oclIsKindOf(Analyze))
				->select(target.oclIsKindOf(Plan))->size()=1;
		}
		class Slave extends patternGenerator::ManagingSystem
		{
			invariant hasMonitor: self.monitor <> null;
			invariant hasNOAnalyze: self.analyze = null;
			invariant hasNOPlan: self.plan = null;
			invariant hasExecute: self.execute <> null;
			invariant checkONEManaged: self.monitor?.hasOneManagedCheck;
			invariant actONEManaged: self.execute?.hasOneManagedAct;
			invariant
			checkAndAct: 
				if(self.monitor.hasOneManagedCheck and self.execute.hasOneManagedAct)
					then self.monitor.check = self.execute.act
				else false
				endif;
			invariant
			slaveMonitorSpeaksWithMasterAnalyze: getMyContextInterComponentInteractions?
								->select(context.oclIsKindOf(Monitor))
								->select(target.oclIsKindOf(Analyze))
								->size()=1;
			invariant
			masterPlanSpeaksWithSlaveExecute: getMyTargetInterComponentInteractions
								->select(context.oclIsKindOf(Plan))
								->select(target.oclIsKindOf(Execute))->size()=1;
		}
		class UnderlyingSubsystem extends patternGenerator::ManagingSystem
		{
			attribute hasAssociatedTargetPlanner : Boolean[1] { derived readonly transient volatile }
			{
				initial: self.getMyContextInterComponentInteractions
					 ->select(targetAndContextNotNull)
					 ->select(target.oclIsKindOf(Plan))
					 ->select(target.oclContainer() <> null and target.oclContainer.oclIsKindOf(RegionalPlanner))
					 ->size()>0;
				}
				attribute hasAssociatedContextPlanner : Boolean[1] { derived readonly transient volatile }
				{
					initial: self.getMyTargetInterComponentInteractions
					 ->select(targetAndContextNotNull)
					 ->select(context.oclIsKindOf(Plan))
					 ->select(context.oclContainer() <> null and context.oclContainer.oclIsKindOf(RegionalPlanner))
					 ->size()>0;
					}
					invariant hasMonitor: self.monitor <> null;
					invariant hasAnalyze: self.analyze <> null;
					invariant hasNoPlan: self.plan = null;
					invariant hasExecute: self.execute <> null;
					invariant checkONEManaged: self.monitor.hasOneManagedCheck;
					invariant actONEManaged: self.execute.hasOneManagedAct;
					invariant
					checkAndAct: 
						if(self.monitor.hasOneManagedCheck and self.execute.hasOneManagedAct)
						then self.monitor.check->any(oclIsKindOf(ManagedSystem)) = self.execute.act->any(oclIsKindOf(ManagedSystem))
						else false
						endif;
					invariant
					monitorSpeaksWithAnalyze: getMyContextInterComponentInteractions
							->select(context.oclIsKindOf(Monitor))
							->select(target.oclIsKindOf(Analyze))->size() = 1;
					invariant
					analyzeSpeaksWithPlan: getMyContextInterComponentInteractions
							->select(context.oclIsKindOf(Analyze))
							->select(target.oclIsKindOf(Plan))->size() = 1;
					invariant
					planSpeaksWithExecute: getMyTargetInterComponentInteractions
							->select(context.oclIsKindOf(Plan))
							->select(target.oclIsKindOf(Execute))->size() = 1;
					invariant
					maxInterInteractionAllowed: getMyContextInterComponentInteractions->size() <= 2 
								and getMyTargetInterComponentInteractions->size()<=2;
					invariant
					hasOneOnlyAssociatedPlanner: 
					if(hasAssociatedContextPlanner and hasAssociatedTargetPlanner)
						then self.getMyContextInterComponentInteractions->any(target.oclIsKindOf(Plan)).target.oclContainer().oclAsType(RegionalPlanner) = 
							self.getMyTargetInterComponentInteractions->any(context.oclIsKindOf(Plan)).context.oclContainer().oclAsType(RegionalPlanner)
					else false
					endif;
				}
				class RegionalPlanner extends patternGenerator::ManagingSystem
				{
					invariant hasNoMonitor: self.monitor = null;
					invariant hasNoAnalyze: self.analyze = null;
					invariant hasPlan: self.plan <> null;
					invariant hasNoExecute: self.execute = null;
				}
				abstract class AbstractPeer extends patternGenerator::ManagingSystem
				{
					invariant hasMonitor: self.monitor <> null;
					invariant hasAnalyze: self.analyze <> null;
					invariant hasPlan: self.plan <> null;
					invariant hasExecute: self.execute <> null;
					invariant
					monitorSpeaksWithAnalyze: getMyContextInterComponentInteractions
										->select(context.oclIsKindOf(Monitor))
										->select(target.oclIsKindOf(Analyze))->size() = 1;
					invariant
					analyzeSpeaksWithPlan: getMyContextInterComponentInteractions
										->select(context.oclIsKindOf(Analyze))
										->select(target.oclIsKindOf(Plan))->size() = 1;
					invariant
					planSpeaksWithExecute: getMyContextInterComponentInteractions
										->select(context.oclIsKindOf(Plan))
										->select(target.oclIsKindOf(Execute))->size() = 1;
					invariant maxInterInteractionAllowed: getMyContextInterComponentInteractions
									->size() <= 3;
				}
				class Peer extends AbstractPeer
				{
					invariant
					checkAndAct: 
						if(self.monitor.hasOneManagedCheck and self.execute.hasOneManagedAct)
						then self.monitor.check->any(oclIsKindOf(ManagedSystem)) = self.execute.act->any(oclIsKindOf(ManagedSystem))
						else false
						endif;
					invariant
					slaveMonitorSpeaksWithMasterAnalyze: getMyContextInterComponentInteractions
										->select(context.oclIsKindOf(Monitor))
										->select(target.oclIsKindOf(Analyze))
										->size()=1;
					invariant
					masterPlanSpeaksWithSlaveExecute: getMyTargetInterComponentInteractions
										->select(context.oclIsKindOf(Plan))
										->select(target.oclIsKindOf(Execute))->size()=1;
				}
				class HPeer extends AbstractPeer
				{
					attribute hasDirectManaged : Boolean[1] { derived readonly transient volatile }
					{
						initial: 
							self.monitor.hasOneManagedCheck and self.execute.hasOneManagedAct 
							and self.monitor.check->any(oclIsKindOf(ManagedSystem)) = self.execute.act->any(oclIsKindOf(ManagedSystem));
						}
						invariant
						hasManaged: 
							if(hasDirectManaged) 
								then true
								else self.monitor <> null and self.execute <> null and self.monitor.check <> null
								and self.execute.act <> null and self.monitor.check->size() > 0 and self.execute.act->size() > 0
								and self.monitor.check = self.execute.act
							endif;
					}
					enum PatternType { serializable }
					{
						literal NoPattern;
						literal InfoSharing = 1;
						literal CustomPattern = 2;
						literal CoordControl = 3;
						literal HierControl = 4;
						literal RegPlanning = 5;
						literal MasterSlave = 6;
					}
					class ConcretePattern extends patternGenerator::DecentralizedControlPattern
					{
						attribute type : PatternType[1];
						invariant noPatternSelected: if(type = PatternType::NoPattern) then false else true endif;
						invariant
						atLeastOnePeer: 
				if(type = PatternType::InfoSharing or type = PatternType::CoordControl)
					then self.elements->select(oclIsKindOf(Peer))->size()>0
				else true
				endif;
						invariant
						peersMonitorSpeakOnlyEachOther: 
							if(type = PatternType::InfoSharing) then
									self.elements->select(oclIsKindOf(IntraComponentInteraction))
									->select(oclAsType(Interaction).targetAndContextNotNull)
									->select( not (oclAsType(Interaction).context.oclIsKindOf(Monitor)
				 					and oclAsType(Interaction).target.oclIsKindOf(Monitor)))
									->size() = 0
				else true
				endif;
						invariant
						presenceOfNotAllowedElements: 
				if(type = PatternType::InfoSharing or type = PatternType::CoordControl) then
					self.elements->select(oclIsKindOf(ManagingSystem))->reject(oclIsKindOf(Peer))->size() = 0
					else true
					endif;
						invariant
						atLeastOneUnderlyingSubsystem: 
				if(type = PatternType::RegPlanning)
					then self.elements->select(oclIsKindOf(UnderlyingSubsystem))->size()>0
					else true
					endif;
						invariant
						atLeastOneRegionalPlanner: 
				if(type = PatternType::RegPlanning)
					then self.elements->select(oclIsKindOf(UnderlyingSubsystem))->size()>0
					else true
					endif;
						invariant
						intraComponentInteractionIsPCoord: 
						if(type = PatternType::RegPlanning)
							then self.elements->select(oclIsKindOf(IntraComponentInteraction))
							->select(oclAsType(Interaction).targetAndContextNotNull)
							->select( not oclIsKindOf(Coordination) or not oclAsType(Interaction).context.oclIsKindOf(Plan)
		 					or not oclAsType(Interaction).target.oclIsKindOf(Plan))
							->size() = 0
						else true
					endif;
						invariant
						intraComponentInteractionIsMCoord: 
				if(type = PatternType::InfoSharing)
					then self.elements->select(oclIsKindOf(IntraComponentInteraction))
							->select(oclAsType(Interaction).targetAndContextNotNull)
							->select( not oclIsKindOf(Coordination) or not oclAsType(Interaction).context.oclIsKindOf(Monitor)
		 					or not oclAsType(Interaction).target.oclIsKindOf(Monitor))
							->size() = 0
					else true
					endif;
						invariant
						NoIntraComponentInteraction: 
				if(type = PatternType::HierControl)
					then self.elements->select(oclIsKindOf(IntraComponentInteraction))
							->size() = 0
					else true
					endif;
						invariant
						intraComponentInteractionIsCoord: 
				if(type = PatternType::CoordControl)
					then self.elements->select(oclIsKindOf(IntraComponentInteraction))
							->select(oclAsType(Interaction).targetAndContextNotNull)
							->select(oclIsKindOf(Delegation))
							->size() = 0
					else true
					endif;
						invariant
						presenceOfNotAllowedElementsInRegionalPlanningPattern: 
				if(type = PatternType::RegPlanning)
					then self.elements->select(oclIsKindOf(ManagingSystem))
						->reject(oclIsKindOf(RegionalPlanner))
						->reject(oclIsKindOf(UnderlyingSubsystem))->size() = 0
					else true
					endif;
						invariant
						exactlyOneMaster: 
				if(type = PatternType::MasterSlave) 
					then self.elements->select(oclIsKindOf(Master))->size() = 1
					else true
					endif;
						invariant
						atLeastOneSlave: 
				if(type = PatternType::MasterSlave) 
						then self.elements->select(oclIsKindOf(Slave))->size() >= 1
						else true
						endif;
						invariant
						maxMasterSlavePatternInteractionAllowed: 
				if(type = PatternType::MasterSlave) 
						then self.elements->select(oclIsKindOf(Interaction))
							->size() <= 2*(self.elements->select(oclIsKindOf(Slave))->size()) + 1
						else true
						endif;
						invariant
						atLeastOneNode: 
				if(type = PatternType::CustomPattern) 
					then self.elements->select(oclIsKindOf(ManagingSystem))->size()>0
					else true
					endif;
						invariant
						presenceOfNotAllowedElementsInMasterSlavePattern: 
						if(type = PatternType::MasterSlave)
						then self.elements->select(oclIsKindOf(ManagingSystem))
						->reject(oclIsKindOf(Master))
						->reject(oclIsKindOf(Slave))->size() = 0
					else true
					endif;
					}
				}
				abstract class Element;
				abstract class ManagingSystem extends Subsystem
				{
					attribute hasInterComponentInteractions : Boolean[1] { derived readonly transient volatile }
					{
						initial: 
				if (self.oclContainer().oclAsType(DecentralizedControlPattern).elements
					->select(oclIsKindOf(InterComponentInteraction))
					->select(oclAsType(Interaction).targetAndContextNotNull )->size()>0) 
					then true
					else false
				endif;
						}
						attribute hasIntraComponentInteractions : Boolean[1] { derived readonly transient volatile }
						{
							initial: 
				if (self.oclContainer().oclAsType(DecentralizedControlPattern).elements
					->select(oclIsKindOf(IntraComponentInteraction))
					->select(oclAsType(Interaction).targetAndContextNotNull)->size()>0) 
					then true
					else false
				endif;
							}
							property getAllInterComponentInteractions : InterComponentInteraction[*|1] { ordered derived readonly transient
							volatile }
							{
								initial: 
				if(hasInterComponentInteractions)
					then
						self.oclContainer().oclAsType(DecentralizedControlPattern).elements
						->select(oclIsKindOf(InterComponentInteraction))
						->select(oclAsType(Interaction).targetAndContextNotNull)
						->oclAsType(OrderedSet(InterComponentInteraction))
					else OrderedSet(InterComponentInteraction){}
				endif;
							}
							attribute hasMyTargetInterComponentInteractions : Boolean[1] { derived readonly transient volatile }
							{
								initial: 
				if(self.getAllInterComponentInteractions
					->select(targetAndContextNotNull and target.oclContainer() <> null and target.oclContainer().oclIsKindOf(ManagingSystem))
					->select(target.oclContainer().oclAsType(ManagingSystem) = self)
					->size()>0) 
					then true
					else false
				endif;
								}
								property getMyTargetInterComponentInteractions : InterComponentInteraction[*] { ordered derived readonly
								transient volatile }
								{
									initial: 
				if(hasMyTargetInterComponentInteractions)
					then self.getAllInterComponentInteractions
							->select(target.oclContainer().oclAsType(ManagingSystem) = self)
				else OrderedSet(InterComponentInteraction){}
				endif;
								}
								attribute hasMyContextInterComponentInteractions : Boolean[1] { derived readonly transient volatile }
								{
									initial: 
				if(self.getAllInterComponentInteractions
						->select(targetAndContextNotNull and context.oclContainer() <> null and context.oclContainer().oclIsKindOf(ManagingSystem))
						->select(context.oclContainer().oclAsType(ManagingSystem) = self)
						->size()>0) 
					then true
				else false
				endif;
									}
									property getMyContextInterComponentInteractions : InterComponentInteraction[*] { ordered derived readonly
									transient volatile }
									{
										initial: 
				if(hasMyContextInterComponentInteractions)
					then self.getAllInterComponentInteractions
						->select(context.oclContainer().oclAsType(ManagingSystem) = self)
				else OrderedSet(InterComponentInteraction){}
				endif;
									}
									property getAllIntraComponentInteractions : IntraComponentInteraction[*] { ordered derived readonly transient
									volatile }
									{
										initial: 
				if(hasIntraComponentInteractions)
					then self.oclContainer().oclAsType(DecentralizedControlPattern).elements
						->select( m | m.oclIsKindOf(IntraComponentInteraction))
						->select(oclAsType(Interaction).targetAndContextNotNull) 
						->oclAsType(OrderedSet(IntraComponentInteraction))
				else OrderedSet(IntraComponentInteraction){}
				endif;
									}
									attribute hasMyIntraComponentInteractions : Boolean[1] { derived readonly transient volatile }
									{
										initial: 
				if(getAllIntraComponentInteractions
						-> select(target.oclContainer().oclAsType(ManagingSystem) = self)
						->size()>0)
					then true
				else false
				endif;
										}
										property getAllMyIntraComponentInteractions : IntraComponentInteraction[*] { ordered derived readonly
										transient volatile }
										{
											initial: 
				if(hasMyIntraComponentInteractions)
					then getAllIntraComponentInteractions
						->select(target.oclContainer().oclAsType(ManagingSystem) = self)
						->oclAsType(OrderedSet(IntraComponentInteraction))
					else OrderedSet(IntraComponentInteraction){}
				endif;
										}
										property analyze : Analyze[?] { composes };
										property plan : Plan[?] { composes };
										property execute : Execute[?] { composes };
										attribute name : String[?];
										property knowledge : Knowledge[?] { composes };
										property monitor : Monitor[?] { composes };
										invariant
										hasAtLeastOneMapeKComponent: self.monitor <> null or self.analyze <> null 
					or self.plan <> null or self.execute <> null or self.knowledge <> null;
									}
									class ManagedSystem extends Subsystem
									{
										attribute name : String[?];
										attribute attributes : String[*|1] { ordered };
									}
									abstract class MapeComponent;
									class Monitor extends MapeComponent
									{
										property check : Subsystem[*|1] { ordered };
										attribute hasOneManagedCheck : Boolean[1] { derived readonly transient volatile }
										{
											initial: 
												if (self.check <> null and self.check->size() = 1 
										and self.check->select(oclIsKindOf(ManagedSystem)) <> null ) 
									then true
									else false
								endif;
											}
										}
										class Analyze extends MapeComponent;
										class Plan extends MapeComponent;
										class Execute extends MapeComponent
										{
											property act : Subsystem[*|1] { ordered };
											attribute hasOneManagedAct : Boolean[1] { derived readonly transient volatile }
											{
												initial: 
														if (self.act <> null and self.act->size() = 1 
																and self.act->any(oclIsKindOf(ManagedSystem)) <> null) 
															then true
															else false
														endif;
												}
											}
											class Knowledge extends MapeComponent;
											abstract class Interaction extends Element
											{
												property context : MapeComponent[1];
												property target : MapeComponent[1];
												attribute targetAndContextNotNull : Boolean[1] { derived readonly transient volatile }
												{
												initial: context <> null and target <> null;
												}
												invariant targetAndContextDifferent: context <> target
												}
												abstract class DecentralizedControlPattern
												{
													property elements : Element[*|1] { ordered composes };
												}
												abstract class IntraComponentInteraction extends Interaction
												{
													invariant isIntraComponent: context?->oclType() = target?->oclType()
												}
												class InterComponentInteraction extends Interaction
												{
													invariant isInterComponent: context?->oclType() <> target?->oclType()

												}
												class ReadWriteInteraction extends Interaction
												{
												invariant targetIsKnowledge: target <> null and target.oclIsKindOf(Knowledge);
												}
												abstract class Subsystem extends Element;
												class Delegation extends IntraComponentInteraction;
												class Coordination extends IntraComponentInteraction
												{
													property inverse : Coordination[1];
													invariant
													hasExactlyOneInverse: self.oclContainer().oclAsType(DecentralizedControlPattern).elements
														->select( oclIsKindOf(Coordination))
														->select(oclAsType(Coordination).target = self.context 
															and oclAsType(Coordination).context = self.target) 
													->size()=1;
													invariant isInverse: inverse.target = self.context and inverse.context = self.target;
												}
											}